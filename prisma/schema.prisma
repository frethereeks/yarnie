// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ContactStatus {
  READ
  UNREAD
  DELETED
}

enum FoodStatus {
  VISIBLE
  HIDDEN
}

enum Role {
  ROOT
  ADMIN
  USER
}

enum Status {
  PENDING
  ACTIVE
  SUSPENDED
}

model Category {
  id        String     @id @default(cuid())
  name      String     @db.VarChar(100)
  status    FoodStatus @default(VISIBLE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  menu      Menu[]
  userId    String     @db.VarChar(50)
  user      User       @relation(fields: [userId], references: [id])

  @@index([id])
}

model Contact {
  id        String        @id @default(cuid())
  fullname  String        @db.VarChar(100)
  email     String        @unique @db.VarChar(100)
  phone     String        @db.VarChar(50)
  message   String        @db.VarChar(160)
  status    ContactStatus @default(UNREAD)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([id])
}

model Logger {
  id        String        @id @default(cuid())
  message   String        @db.LongText()
  userId    String?       @db.VarChar(50)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    ContactStatus @default(UNREAD)

  @@index([id])
}

model Menu {
  id          String     @id @default(cuid())
  name        String     @db.VarChar(100)
  slug        String     @db.VarChar(500)
  image       String     @db.LongText()
  price       Float      @default(0)
  popular     Boolean    @default(false)
  description String?    @db.MediumText()
  status      FoodStatus @default(VISIBLE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  categoryId String   @db.VarChar(50)
  category   Category @relation(fields: [categoryId], references: [id])
  userId     String   @db.VarChar(50)
  user       User     @relation(fields: [userId], references: [id])

  @@index([id])
}

model Sale {
  id        String   @id @default(cuid())
  food      Int      @db.Int()
  alcohol   Int      @db.Int()
  drink     Int      @db.Int()
  day       DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.VarChar(50)
  user      User     @relation(fields: [userId], references: [id])

  @@index([id])
}

model User {
  id        String   @id @default(cuid())
  firstname String   @db.VarChar(50)
  lastname  String   @db.VarChar(50)
  image     String?  @db.LongText()
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(100)
  status    Status   @default(PENDING)
  role      Role     @default(USER)
  token     String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category Category[]
  menu     Menu[]
  sale     Sale[]

  @@index([id])
}
