// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ContactStatus {
  Read
  Unread
  Deleted
}

enum FoodStatus {
  Visible
  Hidden
}

enum Role {
  Owner
  Admin
  User
}

enum Status {
  Pending
  Active
  Suspended
}

enum OrderStatus {
  Pending
  Received
  OutForDelivery
  Delivered
  Returned
}

model YnCategory {
  id        String      @id @default(cuid())
  name      String      @db.VarChar(100)
  status    FoodStatus  @default(Visible)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  product   YnProduct[]
  user      YnUser      @relation(fields: [userId], references: [id])
  userId    String      @db.VarChar(50)

  @@index([id])
}

model YnContact {
  id        String        @id @default(cuid())
  fullname  String        @db.VarChar(100)
  email     String        @unique @db.VarChar(100)
  phone     String        @db.VarChar(50)
  message   String        @db.VarChar(160)
  status    ContactStatus @default(Unread)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([id])
}

model YnLogger {
  id        String        @id @default(cuid())
  action    String        @db.VarChar(20)
  table     String        @db.VarChar(20)
  message   String        @db.LongText()
  userId    String?       @db.VarChar(50)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    ContactStatus @default(Unread)

  @@index([id])
}

model YnProduct {
  id           String     @id @default(cuid())
  name         String     @db.VarChar(100)
  slug         String     @db.VarChar(500)
  image        String     @db.LongText()
  price        Float      @default(0)
  qtyAvailable Float      @default(0)
  popular      Boolean    @default(false)
  description  String?    @db.MediumText()
  status       FoodStatus @default(Visible)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  category    YnCategory    @relation(fields: [categoryId], references: [id])
  categoryId  String        @db.VarChar(50)
  user        YnUser        @relation(fields: [userId], references: [id])
  userId      String        @db.VarChar(50)
  YnOrderItem YnOrderItem[]

  @@index([id])
}

model YnOrder {
  id          String        @id @default(cuid()) @db.VarChar(50)
  fullname    String        @db.VarChar(100)
  email       String        @db.VarChar(50)
  phone       String        @db.VarChar(20)
  proof       String        @db.TinyText()
  address     String        @db.TinyText()
  status      OrderStatus   @default(Pending)
  delivery    DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  updatedBy   String?       @db.VarChar(50)
  YnOrderItem YnOrderItem[]

  @@index([id])
}

model YnOrderItem {
  id        String      @id @default(cuid()) @db.VarChar(50)
  price     Float       @default(0)
  quantity  Int         @default(0)
  status    OrderStatus @default(Pending)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  updatedBy String?     @db.VarChar(50)
  product   YnProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     YnOrder    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String

  @@index([id])
}

model YnUser {
  id        String   @id @default(cuid())
  firstname String   @db.VarChar(50)
  lastname  String   @db.VarChar(50)
  image     String?  @db.LongText()
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(100)
  status    Status   @default(Pending)
  role      Role     @default(User)
  token     String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category YnCategory[]
  product  YnProduct[]

  @@index([id])
}
